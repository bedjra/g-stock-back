package com.estock.stock.service;

import com.estock.stock.Dto.ProduitVenduDTO;
import com.estock.stock.Dto.VenteResponseDTO;
import com.estock.stock.Entity.Configuration;
import com.estock.stock.repository.ConfigurationRepository;
import com.itextpdf.text.*;
import com.itextpdf.text.Font;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.io.ByteArrayOutputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.*;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.stream.Stream;

@Service
public class Facturepdf {

    @Autowired
    private ConfigurationRepository configurationRepository;

    private static int compteurFacture = 0;
    private static final String DOSSIER_FACTURES = "Factures";

    // Tableau pour convertir les nombres en lettres
    private static final String[] unites = {"", "un", "deux", "trois", "quatre", "cinq", "six", "sept", "huit", "neuf"};
    private static final String[] dizaines = {"", "dix", "vingt", "trente", "quarante", "cinquante", "soixante", "soixante-dix", "quatre-vingt", "quatre-vingt-dix"};
    private static final String[] teens = {"dix", "onze", "douze", "treize", "quatorze", "quinze", "seize", "dix-sept", "dix-huit", "dix-neuf"};

    public byte[] genererFacturePdf(VenteResponseDTO vente) {
        compteurFacture++;
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        Document document = new Document(PageSize.A4, 30, 30, 30, 30);

        try {
            PdfWriter.getInstance(document, out);
            document.open();

            // === Styles ===
            Font fontEntreprise = FontFactory.getFont(FontFactory.HELVETICA_BOLD, 18);
            Font fontSousTitre = FontFactory.getFont(FontFactory.HELVETICA, 8);
            Font fontInfo = FontFactory.getFont(FontFactory.HELVETICA, 8);
            Font fontInfoBold = FontFactory.getFont(FontFactory.HELVETICA_BOLD, 8);
            Font fontTitle = FontFactory.getFont(FontFactory.HELVETICA_BOLD, 12);
            Font fontSmall = FontFactory.getFont(FontFactory.HELVETICA, 8);
            Font fontTableHeader = FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9);
            Font fontTotal = FontFactory.getFont(FontFactory.HELVETICA_BOLD, 11);

            // === Récupération config société ===
            Configuration config = configurationRepository.findAll().stream().findFirst().orElse(null);

            // === EN-TÊTE AVEC LOGO ET INFOS ===
            PdfPTable headerTable = new PdfPTable(2);
            headerTable.setWidthPercentage(100);
            headerTable.setWidths(new float[]{1f, 2f});

            // Logo à gauche
            PdfPCell logoCell = new PdfPCell();
            logoCell.setBorder(Rectangle.NO_BORDER);
            if (config != null && config.getLogo() != null) {
                Image logo = Image.getInstance(config.getLogo());
                logo.scaleToFit(80, 80);
                logoCell.addElement(logo);
            }
            headerTable.addCell(logoCell);

            // Infos entreprise à droite (SANS les détails)
            PdfPCell infoCell = new PdfPCell();
            infoCell.setBorder(Rectangle.NO_BORDER);
            infoCell.setHorizontalAlignment(Element.ALIGN_RIGHT);

            if (config != null) {
                Paragraph nomEntreprise = new Paragraph(config.getNom(), fontEntreprise);
                nomEntreprise.setAlignment(Element.ALIGN_RIGHT);
                infoCell.addElement(nomEntreprise);

                Paragraph adresse = new Paragraph(config.getAdresse(), fontSousTitre);
                adresse.setAlignment(Element.ALIGN_RIGHT);
                adresse.setSpacingBefore(3);
                infoCell.addElement(adresse);

                Paragraph telephones = new Paragraph(
                        "Tél: " + config.getTel1() + " / " + config.getTel2(),
                        fontSousTitre
                );
                telephones.setAlignment(Element.ALIGN_RIGHT);
                infoCell.addElement(telephones);
            }

            headerTable.addCell(infoCell);
            document.add(headerTable);

            // === DATE FACTURE (en haut à droite) ===
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
            Paragraph dateFacture = new Paragraph("Date Facture : " + vente.getDateVente().format(formatter), fontInfo);
            dateFacture.setAlignment(Element.ALIGN_RIGHT);
            dateFacture.setSpacingBefore(5);
            dateFacture.setSpacingAfter(10);
            document.add(dateFacture);

            // === LIGNE DE SÉPARATION ===
            document.add(new Paragraph(" "));
            com.itextpdf.text.pdf.draw.LineSeparator line = new com.itextpdf.text.pdf.draw.LineSeparator();
            line.setLineWidth(1f);
            document.add(new Chunk(line));

            // === NUMÉRO DE FACTURE ===
            Paragraph numFacture = new Paragraph("FACTURE N° " + String.format("%010d", compteurFacture), fontTitle);
            numFacture.setAlignment(Element.ALIGN_CENTER);
            numFacture.setSpacingBefore(8);
            numFacture.setSpacingAfter(8);
            document.add(numFacture);

            // === NOM DU CLIENT ===
            Paragraph client = new Paragraph("NOM DU CLIENT : CLIENTS DIVERS", fontInfoBold);
            client.setSpacingAfter(10);
            document.add(client);

            // === TABLEAU DES PRODUITS ===
            PdfPTable table = new PdfPTable(6);
            table.setWidthPercentage(100);
            table.setWidths(new float[]{1f, 5f, 2f, 2f, 2f, 2f});

            // En-têtes du tableau
            Stream.of("Qté", "Désignation", "P.V.U", "Remise", "Prix Net", "Montant")
                    .forEach(title -> {
                        PdfPCell header = new PdfPCell(new Phrase(title, fontTableHeader));
                        header.setBackgroundColor(BaseColor.LIGHT_GRAY);
                        header.setHorizontalAlignment(Element.ALIGN_CENTER);
                        header.setPadding(5);
                        table.addCell(header);
                    });

            // Calculs des totaux
            double totalHT = 0;
            double totalRemise = 0;
            double totalTTC = 0;

            // Lignes des produits
            for (ProduitVenduDTO produit : vente.getProduits()) {
                int qte = produit.getQuantite();
                double prixU = produit.getPrixUnitaire();
                double remise = produit.getRemise();
                double prixNet = prixU - (remise / qte);
                double montant = prixNet * qte;

                totalHT += prixU * qte;
                totalRemise += remise;
                totalTTC += montant;

                // Quantité (NOMBRE EXACT)
                PdfPCell qteCell = new PdfPCell(new Phrase(String.valueOf(qte), fontSmall));
                qteCell.setHorizontalAlignment(Element.ALIGN_CENTER);
                qteCell.setPadding(5);
                table.addCell(qteCell);

                // Désignation
                PdfPCell nomCell = new PdfPCell(new Phrase(produit.getNom(), fontSmall));
                nomCell.setPadding(5);
                table.addCell(nomCell);

                // P.V.U
                PdfPCell pvuCell = new PdfPCell(new Phrase(String.format("%.0f F", prixU), fontSmall));
                pvuCell.setHorizontalAlignment(Element.ALIGN_RIGHT);
                pvuCell.setPadding(5);
                table.addCell(pvuCell);

                // Remise
                PdfPCell remiseCell = new PdfPCell(new Phrase(String.format("%.0f ", remise), fontSmall));
                remiseCell.setHorizontalAlignment(Element.ALIGN_RIGHT);
                remiseCell.setPadding(5);
                table.addCell(remiseCell);

                // Prix Net
                PdfPCell prixNetCell = new PdfPCell(new Phrase(String.format("%.0f ", prixNet), fontSmall));
                prixNetCell.setHorizontalAlignment(Element.ALIGN_RIGHT);
                prixNetCell.setPadding(5);
                table.addCell(prixNetCell);

                // Montant
                PdfPCell montantCell = new PdfPCell(new Phrase(String.format("%.0f F", montant), fontSmall));
                montantCell.setHorizontalAlignment(Element.ALIGN_RIGHT);
                montantCell.setPadding(5);
                table.addCell(montantCell);
            }

            document.add(table);
            document.add(new Paragraph(" "));

            // === TABLEAU DES TOTAUX (dans un cadre à droite) ===
            PdfPTable totauxTable = new PdfPTable(2);
            totauxTable.setWidthPercentage(45);
            totauxTable.setHorizontalAlignment(Element.ALIGN_RIGHT);
            totauxTable.setWidths(new float[]{3f, 2f});

            // Montant Total HT
            PdfPCell labelHT = new PdfPCell(new Phrase("Montant Total HT", fontInfoBold));
            labelHT.setBorder(Rectangle.BOX);
            labelHT.setPadding(5);
            PdfPCell valueHT = new PdfPCell(new Phrase(String.format("%.0f F", totalHT), fontInfo));
            valueHT.setBorder(Rectangle.BOX);
            valueHT.setHorizontalAlignment(Element.ALIGN_RIGHT);
            valueHT.setPadding(5);
            totauxTable.addCell(labelHT);
            totauxTable.addCell(valueHT);

            // Remise
            PdfPCell labelRemise = new PdfPCell(new Phrase("Remise", fontInfoBold));
            labelRemise.setBorder(Rectangle.BOX);
            labelRemise.setPadding(5);
            PdfPCell valueRemise = new PdfPCell(new Phrase(String.format("%.0f F", totalRemise), fontInfo));
            valueRemise.setBorder(Rectangle.BOX);
            valueRemise.setHorizontalAlignment(Element.ALIGN_RIGHT);
            valueRemise.setPadding(5);
            totauxTable.addCell(labelRemise);
            totauxTable.addCell(valueRemise);

            // Net Commercial
            PdfPCell labelNet = new PdfPCell(new Phrase("Net Commercial", fontInfoBold));
            labelNet.setBorder(Rectangle.BOX);
            labelNet.setPadding(5);
            PdfPCell valueNet = new PdfPCell(new Phrase(String.format("%.0f F", totalTTC), fontInfo));
            valueNet.setBorder(Rectangle.BOX);
            valueNet.setHorizontalAlignment(Element.ALIGN_RIGHT);
            valueNet.setPadding(5);
            totauxTable.addCell(labelNet);
            totauxTable.addCell(valueNet);

            // Montant TVA
            PdfPCell labelTVA = new PdfPCell(new Phrase("Montant TVA", fontInfoBold));
            labelTVA.setBorder(Rectangle.BOX);
            labelTVA.setPadding(5);
            PdfPCell valueTVA = new PdfPCell(new Phrase("0 F", fontInfo));
            valueTVA.setBorder(Rectangle.BOX);
            valueTVA.setHorizontalAlignment(Element.ALIGN_RIGHT);
            valueTVA.setPadding(5);
            totauxTable.addCell(labelTVA);
            totauxTable.addCell(valueTVA);

            // Montant TTC (en gras)
            PdfPCell labelTTC = new PdfPCell(new Phrase("Montant TTC", fontTotal));
            labelTTC.setBorder(Rectangle.BOX);
            labelTTC.setPadding(5);
            labelTTC.setBackgroundColor(BaseColor.LIGHT_GRAY);
            PdfPCell valueTTC = new PdfPCell(new Phrase(String.format("%.0f F", totalTTC), fontTotal));
            valueTTC.setBorder(Rectangle.BOX);
            valueTTC.setHorizontalAlignment(Element.ALIGN_RIGHT);
            valueTTC.setPadding(5);
            valueTTC.setBackgroundColor(BaseColor.LIGHT_GRAY);
            totauxTable.addCell(labelTTC);
            totauxTable.addCell(valueTTC);

            document.add(totauxTable);
            document.add(new Paragraph(" "));

            // === ARRÊTÉ LA PRÉSENTE FACTURE À LA SOMME DE (converti en lettres) ===
            String montantEnLettres = convertirMontantEnLettres((int) totalTTC);
            Paragraph arrete = new Paragraph(
                    "Arrêté la présente facture à la somme de : " + montantEnLettres.toUpperCase() + " FRANCS CFA",
                    fontInfo
            );
            arrete.setSpacingBefore(10);
            arrete.setSpacingAfter(15);
            document.add(arrete);

            // === SIGNATURE (plus bas) ===
            Paragraph signature = new Paragraph("Signature", fontInfo);
            signature.setAlignment(Element.ALIGN_RIGHT);
            signature.setSpacingAfter(80);
            document.add(signature);

            // Espace pour pousser la note en bas
            for (int i = 0; i < 10; i++) {
                document.add(new Paragraph(" "));
            }

            // === NOTE EN BAS (TOUT EN BAS DE LA PAGE) ===
            Paragraph note = new Paragraph(
                    "NB : Les marchandises livrées ne sont ni reprises ni échangées.",
                    fontSousTitre
            );
            note.setAlignment(Element.ALIGN_CENTER);
            document.add(note);

            document.close();

            // Sauvegarde du fichier
            sauvegarderFacture(out.toByteArray(), vente.getId());

        } catch (Exception e) {
            e.printStackTrace();
            throw new RuntimeException("Erreur lors de la génération du PDF : " + e.getMessage());
        }

        return out.toByteArray();
    }

    /**
     * Convertit un montant en lettres (en français)
     */
    private String convertirMontantEnLettres(int montant) {
        if (montant == 0) return "zéro";

        String resultat = "";

        // Millions
        if (montant >= 1000000) {
            int millions = montant / 1000000;
            resultat += convertirCentaines(millions) + " million";
            if (millions > 1) resultat += "s";
            montant %= 1000000;
            if (montant > 0) resultat += " ";
        }

        // Milliers
        if (montant >= 1000) {
            int milliers = montant / 1000;
            if (milliers == 1) {
                resultat += "mille";
            } else {
                resultat += convertirCentaines(milliers) + " mille";
            }
            montant %= 1000;
            if (montant > 0) resultat += " ";
        }

        // Centaines
        if (montant > 0) {
            resultat += convertirCentaines(montant);
        }

        return resultat.trim();
    }

    private String convertirCentaines(int nombre) {
        if (nombre == 0) return "";

        String resultat = "";

        // Centaines
        int centaines = nombre / 100;
        if (centaines > 0) {
            if (centaines == 1) {
                resultat += "cent";
            } else {
                resultat += unites[centaines] + " cent";
            }
            if (nombre % 100 == 0 && centaines > 1) {
                resultat += "s";
            }
            nombre %= 100;
            if (nombre > 0) resultat += " ";
        }

        // Dizaines et unités
        if (nombre >= 10 && nombre < 20) {
            resultat += teens[nombre - 10];
        } else {
            int dizaine = nombre / 10;
            int unite = nombre % 10;

            if (dizaine > 0) {
                resultat += dizaines[dizaine];
                if (dizaine == 7 || dizaine == 9) {
                    if (unite == 1) {
                        resultat += " et onze";
                        unite = 0;
                    } else if (unite > 1) {
                        resultat += "-" + teens[unite];
                        unite = 0;
                    }
                }
            }

            if (unite > 0) {
                if (dizaine > 0 && unite == 1 && dizaine != 8 && dizaine != 9) {
                    resultat += " et un";
                } else if (dizaine > 0) {
                    resultat += "-" + unites[unite];
                } else {
                    resultat += unites[unite];
                }
            }

            if (dizaine == 8 && unite == 0) {
                resultat += "s";
            }
        }

        return resultat;
    }

    /**
     * 💾 Sauvegarde la facture PDF dans le dossier "Factures"
     */
    private void sauvegarderFacture(byte[] pdfBytes, Long venteId) {
        try {
            Path dossierPath = Paths.get(DOSSIER_FACTURES);
            if (!Files.exists(dossierPath)) {
                Files.createDirectories(dossierPath);
                System.out.println("✅ Dossier 'Factures' créé avec succès");
            }

            DateTimeFormatter fileFormatter = DateTimeFormatter.ofPattern("yyyyMMdd_HHmmss");
            String timestamp = LocalDateTime.now().format(fileFormatter);
            String nomFichier = String.format("Facture_%d_%s.pdf", venteId, timestamp);

            Path cheminComplet = dossierPath.resolve(nomFichier);

            try (FileOutputStream fos = new FileOutputStream(cheminComplet.toFile())) {
                fos.write(pdfBytes);
                System.out.println("✅ Facture sauvegardée : " + cheminComplet.toAbsolutePath());
            }

        } catch (IOException e) {
            System.err.println("❌ Erreur lors de la sauvegarde de la facture : " + e.getMessage());
            e.printStackTrace();
        }
    }
}